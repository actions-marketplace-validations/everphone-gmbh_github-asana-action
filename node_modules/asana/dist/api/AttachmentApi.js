"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AttachmentResponse = _interopRequireDefault(require("../model/AttachmentResponse"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
* Attachment service.
* @module api/AttachmentApi
* @version 0.0.1
*/
var AttachmentApi = /*#__PURE__*/function () {
  /**
  * Constructs a new AttachmentApi. 
  * @alias module:api/AttachmentApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function AttachmentApi(apiClient) {
    _classCallCheck(this, AttachmentApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the uploadAttachment operation.
   * @callback module:api/AttachmentApi~uploadAttachmentCallback
   * @param {String} error Error message, if any.
   * @param {module:model/AttachmentResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Upload an attachment
   * Upload an attachment.  This method uploads an attachment on an object and returns the compact record for the created attachment object. This is possible by either:  - Providing the URL of the external resource being attached, or - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API  The 100MB size limit on attachments in Asana is enforced on this endpoint.  This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.  Requests made should follow the HTTP/1.1 specification that line terminators are of the form `CRLF` or `\\r\\n` outlined [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
   * @param {Boolean} opts.optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
   * @param {module:model/String} opts.resourceSubtype The type of the attachment. Must be one of the given values. If not specified, a file attachment of type `asana` will be assumed. Note that if the value of `resource_subtype` is `external`, a `parent`, `name`, and `url` must also be provided. 
   * @param {File} opts.file Required for `asana` attachments. 
   * @param {String} opts.parent Required identifier of the parent task, project, or project_brief, as a string. 
   * @param {String} opts.url The URL of the external resource being attached. Required for attachments of type `external`. 
   * @param {String} opts.name The name of the external resource being attached. Required for attachments of type `external`. 
   * @param {Boolean} opts.connectToApp *Optional*. Only relevant for external attachments with a parent task. A boolean indicating whether the current app should be connected with the attachment for the purposes of showing an app components widget. Requires the app to have been added to a project the parent task is in. 
   * @param {module:api/AttachmentApi~uploadAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/AttachmentResponse}
   */
  _createClass(AttachmentApi, [{
    key: "uploadAttachment",
    value: function uploadAttachment(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'opt_pretty': opts['optPretty']
      };
      var headerParams = {};
      var formParams = {
        'resource_subtype': opts['resourceSubtype'],
        'file': opts['file'],
        'parent': opts['parent'],
        'url': opts['url'],
        'name': opts['name'],
        'connect_to_app': opts['connectToApp']
      };
      var authNames = ['oauth2', 'personal_access_token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = _AttachmentResponse["default"];
      return this.apiClient.callApi('/attachments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return AttachmentApi;
}();
exports["default"] = AttachmentApi;